version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      - test:
          name: test
      - lint:
          name: lint
      - build:
          name: build
          requires: [test, lint]

orbs:
  notify_queue_consumer:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/sirius-ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                eval $(aws ecr get-login --no-include-email --region=eu-west-1)
    executors:
      python:
        docker: [image: circleci/python]
      php:
        docker: [image: circleci/php]
      linter:
        docker: [image: cytopia/phpcs:latest-php7.4]

jobs:
  test:
    executor: notify_queue_consumer/php
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          name: Prep local env variables for docker compose
          command: cp local.env.example local.env
      - run: sudo pecl install pcov
      - run: sudo docker-php-ext-enable pcov
      - run: sudo composer self-update
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - run:
          name: Run unit tests with coverage
          command: |
            php \
            -dpcov.enabled=1 \
            -dpcov.directory=./ \
            -dpcov.exclude=\"~./vendor~\" \
            ./vendor/bin/phpunit \
            --configuration=./phpunit.xml \
            --coverage-text \
            --coverage-clover=./test-results/pcov/results.xml \
            --log-junit=./test-results/unit/results.xml \
            --testsuite=unit
      - run:
          name: Run Static Analysis
          command: ./vendor/bin/phpstan analyse --no-progress --level=7 src
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path:  ./test-results/pcov
          destination: coverage-report
  lint:
    executor: notify_queue_consumer/linter
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          name: Prep local env variables for docker compose
          command: cp local.env.example local.env
      - run:
          name: Run Linting Checks
          command: |
            phpcs \
            -p \
            --report=checkstyle \
            --standard=PSR12 \
            --warning-severity=0 \
            src \
            public

  build:
    executor: notify_queue_consumer/python
    parameters:
      container_repo_url:
        type: string
        default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer
    steps:
      - checkout
      - notify_queue_consumer/install_aws_cli
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: false
      - notify_queue_consumer/ecr_login
      - run:
          name: Build
          command: docker build --file Dockerfile --tag notify-queue-consumer:latest .
      - run:
          name: Push container
          command: |
            export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
            docker tag notify-queue-consumer:latest << parameters.container_repo_url >>:latest
            docker tag notify-queue-consumer:latest << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # We want all of the tags pushed
              docker push << parameters.container_repo_url >>
            else
              docker push << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
            fi
