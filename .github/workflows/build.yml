name: Test & Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:

  lint:
    name: PHPCS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run PHPCS
        run: make lint


  test-unit:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: |
          cp local.env.example local.env
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-v1-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-v1-${{ hashFiles('**/composer.lock') }}
            composer-v1

      - name: Run Unit Tests Docker
        run: make unit-test

      - name: Check Coverage
        run: make check-coverage

      - name: Upload Coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-report
          path: |
            ./test-results/coverage

  test-functional:
    name: Functional Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Build consumer dev image
        run: make build DEV_DEPS="true"
      - name: Run Functional Tests
        run: make functional-test

  metrics:
    name: Metrics
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Generate report
        run: make phpmetrics

      - name: Upload Metrics
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: phpmetrics
          path: |
            ./test-results/phpmetrics

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Run PHPStan
        run: make phpstan

  create-tag:
    name: Create Tags
    uses: ./.github/workflows/create-tags.yml

  build:
    name: Build Image
    uses: ministryofjustice/opg-github-workflows/.github/workflows/build-multi-architecture-image.yml@27a0f72b83c6b026fa4131230289bfbed9049cc7 # v3.15.0
    with:
      image_name: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer
      build_options: --build-arg ENABLE_DEV_DEPS=false --file docker/Dockerfile
      cli_commands: make copy-env

  push:
    name: "Push Image"
    runs-on: ubuntu-latest
    needs: ['lint', 'test-unit', 'test-functional', 'static-analysis', 'create-tag', 'build']
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=$(echo ${{ github.head_ref }} | sed 's/\//-/g') >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: /tmp/images
          name: multi-arch-image
      - name: Load Image
        run: |
          docker load -i /tmp/images/multi-arch-image.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659

      - name: Trivy Image Vulnerability Scanner
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
          DOCKER_USERNAME: ${{ steps.login-ecr.outputs.docker_username_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
          DOCKER_PASSWORD: ${{ steps.login-ecr.outputs.docker_password_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
        run: make scan

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@39edc492dbe16b1465b0cafca41432d857bdb31a # v3.29.1
        if: always()
        with:
          sarif_file: "test-results/trivy.sarif"

      - name: Tag & Push
        run: |
          docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:${{ needs.create-tag.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:main-${{ needs.create-tag.outputs.tag }}
            docker tag 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:latest 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:main-${{ needs.create-tag.outputs.tag }}-${{ needs.create-tag.outputs.timestamp }}
            # We want all of the tags pushed
            docker push  --all-tags 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer
          else
            docker push 311462405659.dkr.ecr.eu-west-1.amazonaws.com/notify-queue-consumer:${{ needs.create-tag.outputs.tag }}
          fi

  end_of_pr_workflow:
    name: End of PR Workflow
    runs-on: ubuntu-latest
    if: always()
    needs: ['lint', 'test-unit', 'test-functional', 'static-analysis', 'create-tag', 'build', 'push']
    steps:
      - name: End of PR Workflow
        run: |
          if ${{ contains(needs.*.result,'failure') }}
          then
            echo "Not all checks succedeed, check the previous jobs."
            exit 1
          else
            echo "All checks succedeed!"
            exit 0
          fi
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: [create-tag, end_of_pr_workflow]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-notify-queue-consumer-latest-green-build" --type "String" --value "${{ needs.create-tag.outputs.tag}}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-notify-queue-consumer"
